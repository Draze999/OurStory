package ourstory.events;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.bukkit.Bukkit;
import org.bukkit.Color;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Particle;
import org.bukkit.entity.Entity;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.plugin.Plugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.util.RayTraceResult;
import org.bukkit.util.Vector;

import io.papermc.paper.event.player.PlayerStopUsingItemEvent;
import ourstory.utils.EnchantItem;

/**
 *
 * @author aurel
 */
public class onVulnerabilitySeeker implements Listener {
	private final Plugin p = Bukkit.getPluginManager().getPlugin("OurStory");
	private final HashMap<UUID, Boolean> runningTasks = new HashMap<>();
	private final Map<Entity, BukkitRunnable> particleColorTimer = new HashMap<>();
	private final int effectTimer = 1200;
	private final Color effectColor = Color.fromRGB(143, 69, 237);

	@EventHandler
	public void ApplyEffectWithSpyglass(PlayerInteractEvent event) {
		if (event == null || event.getItem() == null)
			return;
		ItemStack item = event.getItem();
		if (item.getType() != Material.SPYGLASS)
			return;
		if (event.getAction() != Action.RIGHT_CLICK_AIR && event.getAction() != Action.RIGHT_CLICK_BLOCK)
			return;
		Player player = event.getPlayer();

		if (!runningTasks.containsKey(player.getUniqueId()))
			runningTasks.put(player.getUniqueId(), false);
		runningTasks.replace(player.getUniqueId(), true);
		BukkitRunnable task = new BukkitRunnable() {
			@Override
			public void run() {


				int VulneSeekLevel = EnchantItem.getEnchantAmount(item, "vulnerability_seeker");

				if ((VulneSeekLevel > 0) && runningTasks.get(player.getUniqueId())) {
					Vector direction = player.getEyeLocation().getDirection();
					RayTraceResult result = player.getWorld().rayTraceEntities(player.getEyeLocation(), direction, 50, (entity) -> entity instanceof Entity && entity != player);
					if (result != null && result.getHitEntity() instanceof LivingEntity) {
						((LivingEntity) result.getHitEntity()).addPotionEffect(new PotionEffect(PotionEffectType.GLOWING, effectTimer, 1, false, false, true));
						((LivingEntity) result.getHitEntity()).addPotionEffect(new PotionEffect(PotionEffectType.WEAKNESS, effectTimer, 2, false, false, true));
						startParticleEffect(result.getHitEntity());

					}
				}
			}
		};
		task.runTaskTimer(p, 0, 1); // Ex√©cutez chaque tick
	}

	@EventHandler
	public void ApplyEffectWithSpyglass(PlayerStopUsingItemEvent event) {
		if (event == null)
			return;
		if (event.getItem().getType() != Material.SPYGLASS)
			return;
		Player player = event.getPlayer();
		if (runningTasks.containsKey(player.getUniqueId()))
			runningTasks.replace(player.getUniqueId(), false);
	}



	public void startParticleEffect(Entity entity) {
		cancelExistingTimer(entity);
		BukkitRunnable particleTask = new BukkitRunnable() {
			int timeLeft = effectTimer;

			@Override
			public void run() {
				if (timeLeft <= 0) {
					this.cancel();
					particleColorTimer.remove(entity);
				} else {
					Location location = entity.getLocation().add(0, 0.5, 0);
					entity.getWorld().spawnParticle(Particle.ENTITY_EFFECT, location, 5, effectColor);
					timeLeft -= 5L;
				}
			}
		};

		particleTask.runTaskTimer(p, 0L, 5L);

		particleColorTimer.put(entity, particleTask);
	}

	public void cancelExistingTimer(Entity entity) {
		BukkitRunnable existingTask = particleColorTimer.get(entity);
		if (existingTask != null) {
			existingTask.cancel();
			particleColorTimer.remove(entity);
		}
	}
}
